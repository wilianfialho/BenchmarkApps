import psutil
import datetime
import tkinter as tk
from tkinter import ttk

# Função para converter bytes em MB
def converte_bytes_mb(bytes):
    return round(bytes/(1024*1024), 2)

# Função para obter informações sobre o uso total de CPU, memória e disco pelo sistema
def obter_uso_total():
    uso_cpu = psutil.cpu_percent()
    uso_memoria = psutil.virtual_memory().percent
    uso_disco = psutil.disk_usage('/').percent
    return uso_cpu, uso_memoria, uso_disco

# Função para atualizar as informações de processos na tabela
def atualizar_tabela():
    # Limpa a tabela existente
    for linha in tabela.get_children():
        tabela.delete(linha)
    
    # Obtém as opções de ordenação e filtragem selecionadas pelo usuário
    ordem = opcoes_ordem.get()
    filtrar_por_nome = campo_filtrar_por_nome.get().lower()
    filtrar_por_pid = campo_filtrar_por_pid.get().lower()
    
    # Obter data e hora atual
    data_hora = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Lista para armazenar as informações dos processos
    processos = []

    # Loop através de todos os processos em execução
    for processo in psutil.process_iter(['name', 'pid', 'cpu_percent', 'memory_info', 'io_counters']):
        try:
            # Obtém as informações do processo
            nome_processo = processo.info['name']
            pid = processo.info['pid']
            cpu = processo.info['cpu_percent'](interval=1)
            mem_residente = converte_bytes_mb(processo.info['memory_info'].rss)
            mem_virtual = converte_bytes_mb(processo.info['memory_info'].vms)
            leitura_disco, escrita_disco = processo.info['io_counters'].read_bytes, processo.info['io_counters'].write_bytes
            uso_total_disco = psutil.disk_usage('/').percent

            # Adiciona as informações do processo à lista de processos
            processos.append([nome_processo, pid, cpu, mem_residente, mem_virtual, leitura_disco, escrita_disco, uso_total_disco])
        
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    # Ordena a lista de processos
    if ordem.lower() == 'c':
        processos.sort(key=lambda x: x[2], reverse=True)
    elif ordem.lower() == 'm':
        processos.sort(key=lambda x: x[3], reverse=True)
    elif ordem.lower() == 'd':
        processos.sort(key=lambda x: x[7], reverse=True)
    
    # Escreve as informações dos processos na tabela
    for processo in processos:
        if filtrar_por_nome and filtrar_por_nome not in processo[0].lower():
            continue
        if filtrar_por_pid and filtrar_por_pid != str(processo[1]):
            continue
        tabela.insert('', 'end', values=[data_hora, processo[0], processo[1], processo[2], processo[3], processo[4], processo[5], processo[6], processo[7]])


# Cria a janela principal
janela = tk.Tk()
janela.title("Monitor de Processos")
janela.geometry("800x600")

# Cria a tabela para exibir as informações de processos
tabela = ttk.Treeview(janela, columns=("Data/Hora", "Nome do Processo", "PID", "Uso de CPU (%)", "Memória Residente (MB)", "Memória Virtual (MB)", "Leitura de Disco (bytes)", "Escrita de Disco (bytes)", "Uso Total de Disco (%)"))

# Define os cabeçalhos da tabela
tabela.heading("#0", text="")
tabela.heading("Data/Hora", text="Data/Hora")
tabela.heading("Nome do Processo", text="Nome do Processo")
tabela.heading("PID", text="PID")
tabela.heading("Uso de CPU (%)", text="Uso de CPU (%)")
tabela.heading("Memória Residente (MB)", text="Memória Residente (MB)")
tabela.heading("Memória Virtual (MB)", text="Memória Virtual (MB)")
tabela.heading("Leitura de Disco (bytes)", text="Leitura de Disco (bytes)")
tabela.heading("Escrita de Disco (bytes)", text="Escrita de Disco (bytes)")
tabela.heading("Uso Total de Disco (%)", text="Uso Total de Disco (%)")

# Define as larguras das colunas da tabela
tabela.column("#0", width=0, stretch=tk.NO)
tabela.column("Data/Hora", width=150, anchor=tk.CENTER)
tabela.column("Nome do Processo", width=150, anchor=tk.W)
tabela.column("PID", width=50, anchor=tk.CENTER)
tabela.column("Uso de CPU (%)", width=100, anchor=tk.CENTER)
tabela.column("Memória Residente (MB)", width=150, anchor=tk.CENTER)
tabela.column("Memória Virtual (MB)", width=150, anchor=tk.CENTER)
tabela.column("Leitura de Disco (bytes)", width=150, anchor=tk.CENTER)
tabela.column("Escrita de Disco (bytes)", width=150, anchor=tk.CENTER)
tabela.column("Uso Total de Disco (%)", width=150, anchor=tk.CENTER)

# Cria um quadro para os controles de filtro e ordenação
quadro_controles = tk.Frame(janela)
quadro_controles.pack(side=tk.TOP, fill=tk.X)

# Cria um rótulo e uma caixa de seleção para a ordenação
rotulo_ordem = tk.Label(quadro_controles, text="Ordenar por:")
rotulo_ordem.pack(side=tk.LEFT, padx=5, pady=5)
opcoes_ordem = ttk.Combobox(quadro_controles, values=("C", "M", "D"), state="readonly")
opcoes_ordem.pack(side=tk.LEFT, padx=5, pady=5)
opcoes_ordem.current(0)

# Cria rótulos e caixas de entrada para filtrar por nome e PID
rotulo_filtrar_por_nome = tk.Label(quadro_controles, text="Filtrar por nome:")
rotulo_filtrar_por_nome.pack(side=tk.LEFT, padx=5, pady=5)
campo_filtrar_por_nome = tk.Entry(quadro_controles)
campo_filtrar_por_nome.pack(side=tk.LEFT, padx=5, pady=5)

rotulo_filtrar_por_pid = tk.Label(quadro_controles, text="Filtrar por PID:")
rotulo_filtrar_por_pid.pack(side=tk.LEFT, padx=5, pady=5)
campo_filtrar_por_pid = tk.Entry(quadro_controles)
campo_filtrar_por_pid.pack(side=tk.LEFT, padx=5, pady=5)

# Cria um frame para os controles de ordenação e filtragem
frame_controles = ttk.Frame(janela)

# Cria o controle de ordenação
opcoes_ordem = ttk.Combobox(frame_controles, values=("CPU", "Memória Residente", "Uso de Disco"), state="readonly")
opcoes_ordem.current(0)
opcoes_ordem.grid(row=0, column=0, padx=5, pady=5)

# Cria o controle de filtragem por nome
ttk.Label(frame_controles, text="Filtrar por Nome:").grid(row=0, column=1, padx=5, pady=5)
campo_filtrar_por_nome = ttk.Entry(frame_controles)
campo_filtrar_por_nome.grid(row=0, column=2, padx=5, pady=5)

# Cria o controle de filtragem por PID
ttk.Label(frame_controles, text="Filtrar por PID:").grid(row=0, column=3, padx=5, pady=5)
campo_filtrar_por_pid = ttk.Entry(frame_controles)
campo_filtrar_por_pid.grid(row=0, column=4, padx=5, pady=5)

# Cria o botão de atualizar
botao_atualizar = ttk.Button(frame_controles, text="Atualizar", command=atualizar_tabela)
botao_atualizar.grid(row=0, column=5, padx=5, pady=5)

# Adiciona o frame de controles à janela
frame_controles.pack()

# Adiciona a tabela à janela
tabela.pack(expand=True, fill="both")

# Define a função atualizar_tabela para ser chamada periodicamente
janela.after(5000, atualizar_tabela)

# Inicia o loop principal da interface gráfica
janela.mainloop()
